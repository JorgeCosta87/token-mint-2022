/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import { type ParsedCreateMintInstruction } from '../instructions';

export const TOKEN_MINT_PROGRAM_ADDRESS =
  '9SwkHfBurrRq7Vw5zQ1QErAatwgdqQdaENDt6saCu8SN' as Address<'9SwkHfBurrRq7Vw5zQ1QErAatwgdqQdaENDt6saCu8SN'>;

export enum TokenMintInstruction {
  CreateMint,
}

export function identifyTokenMintInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenMintInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 44, 215, 132, 253, 214, 41, 45])
      ),
      0
    )
  ) {
    return TokenMintInstruction.CreateMint;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenMint instruction.'
  );
}

export type ParsedTokenMintInstruction<
  TProgram extends string = '9SwkHfBurrRq7Vw5zQ1QErAatwgdqQdaENDt6saCu8SN',
> = {
  instructionType: TokenMintInstruction.CreateMint;
} & ParsedCreateMintInstruction<TProgram>;
