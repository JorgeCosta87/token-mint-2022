/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TOKEN_MINT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MINT_TOKEN_DISCRIMINATOR = new Uint8Array([
  172, 137, 183, 14, 207, 110, 234, 56,
]);

export function getMintTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_TOKEN_DISCRIMINATOR);
}

export type MintTokenInstruction<
  TProgram extends string = typeof TOKEN_MINT_PROGRAM_ADDRESS,
  TAccountMintAuthority extends string | AccountMeta<string> = string,
  TAccountRecipient extends string | AccountMeta<string> = string,
  TAccountMintAccount extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMintAuthority extends string
        ? WritableSignerAccount<TAccountMintAuthority> &
            AccountSignerMeta<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountRecipient extends string
        ? ReadonlyAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountMintAccount extends string
        ? WritableAccount<TAccountMintAccount>
        : TAccountMintAccount,
      TAccountAssociatedTokenAccount extends string
        ? WritableAccount<TAccountAssociatedTokenAccount>
        : TAccountAssociatedTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type MintTokenInstructionDataArgs = { amount: number | bigint };

export function getMintTokenInstructionDataEncoder(): FixedSizeEncoder<MintTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MINT_TOKEN_DISCRIMINATOR })
  );
}

export function getMintTokenInstructionDataDecoder(): FixedSizeDecoder<MintTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getMintTokenInstructionDataCodec(): FixedSizeCodec<
  MintTokenInstructionDataArgs,
  MintTokenInstructionData
> {
  return combineCodec(
    getMintTokenInstructionDataEncoder(),
    getMintTokenInstructionDataDecoder()
  );
}

export type MintTokenAsyncInput<
  TAccountMintAuthority extends string = string,
  TAccountRecipient extends string = string,
  TAccountMintAccount extends string = string,
  TAccountAssociatedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  recipient: Address<TAccountRecipient>;
  mintAccount: Address<TAccountMintAccount>;
  associatedTokenAccount?: Address<TAccountAssociatedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: MintTokenInstructionDataArgs['amount'];
};

export async function getMintTokenInstructionAsync<
  TAccountMintAuthority extends string,
  TAccountRecipient extends string,
  TAccountMintAccount extends string,
  TAccountAssociatedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_MINT_PROGRAM_ADDRESS,
>(
  input: MintTokenAsyncInput<
    TAccountMintAuthority,
    TAccountRecipient,
    TAccountMintAccount,
    TAccountAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintTokenInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountRecipient,
    TAccountMintAccount,
    TAccountAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_MINT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: false },
    mintAccount: { value: input.mintAccount ?? null, isWritable: true },
    associatedTokenAccount: {
      value: input.associatedTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenAccount.value) {
    accounts.associatedTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.recipient.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintAccount.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.mintAccount),
      getAccountMeta(accounts.associatedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMintTokenInstructionDataEncoder().encode(
      args as MintTokenInstructionDataArgs
    ),
    programAddress,
  } as MintTokenInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountRecipient,
    TAccountMintAccount,
    TAccountAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >);
}

export type MintTokenInput<
  TAccountMintAuthority extends string = string,
  TAccountRecipient extends string = string,
  TAccountMintAccount extends string = string,
  TAccountAssociatedTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  mintAuthority: TransactionSigner<TAccountMintAuthority>;
  recipient: Address<TAccountRecipient>;
  mintAccount: Address<TAccountMintAccount>;
  associatedTokenAccount: Address<TAccountAssociatedTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: MintTokenInstructionDataArgs['amount'];
};

export function getMintTokenInstruction<
  TAccountMintAuthority extends string,
  TAccountRecipient extends string,
  TAccountMintAccount extends string,
  TAccountAssociatedTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_MINT_PROGRAM_ADDRESS,
>(
  input: MintTokenInput<
    TAccountMintAuthority,
    TAccountRecipient,
    TAccountMintAccount,
    TAccountAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintTokenInstruction<
  TProgramAddress,
  TAccountMintAuthority,
  TAccountRecipient,
  TAccountMintAccount,
  TAccountAssociatedTokenAccount,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_MINT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: false },
    mintAccount: { value: input.mintAccount ?? null, isWritable: true },
    associatedTokenAccount: {
      value: input.associatedTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.mintAccount),
      getAccountMeta(accounts.associatedTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMintTokenInstructionDataEncoder().encode(
      args as MintTokenInstructionDataArgs
    ),
    programAddress,
  } as MintTokenInstruction<
    TProgramAddress,
    TAccountMintAuthority,
    TAccountRecipient,
    TAccountMintAccount,
    TAccountAssociatedTokenAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedMintTokenInstruction<
  TProgram extends string = typeof TOKEN_MINT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    mintAuthority: TAccountMetas[0];
    recipient: TAccountMetas[1];
    mintAccount: TAccountMetas[2];
    associatedTokenAccount: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
    associatedTokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: MintTokenInstructionData;
};

export function parseMintTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mintAuthority: getNextAccount(),
      recipient: getNextAccount(),
      mintAccount: getNextAccount(),
      associatedTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintTokenInstructionDataDecoder().decode(instruction.data),
  };
}
